package playAround;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;

import org.apache.commons.io.output.ByteArrayOutputStream;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.ClientAnchor;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFClientAnchor;
import org.apache.poi.xssf.usermodel.XSSFDrawing;
import org.apache.poi.xssf.usermodel.XSSFPicture;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

public class DataVisualization {
	protected String inputFileName = "input.xlsx";
	ArrayList<DataPair> inputData = new ArrayList<DataPair>();
	// protected FileInputStream fis;
	protected XSSFWorkbook inputWorkbook = null;
	protected XSSFSheet inputWorkSheet = null;

	class DataPair {
		String subject;
		double grade;
	}
	public void readInputData() {
		File fl = new File(inputFileName);
		if (!fl.exists()) {
			System.out.println("No file " + inputFileName + " found!");
			return;
		}
		FileInputStream fis = null;

		try {
			fis = new FileInputStream(fl);
			inputWorkbook = new XSSFWorkbook(fis);
			inputWorkSheet = inputWorkbook.getSheetAt(0);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		Iterator<Row> rowIterator = inputWorkSheet.iterator();

		while (rowIterator.hasNext()) {
			// Read Rows from Excel document
			Row row = rowIterator.next();
			// Read cells in Rows and get chart data
			Iterator<Cell> cellIterator = row.cellIterator();
			DataPair dp = new DataPair();
			while (cellIterator.hasNext()) {
				Cell cell = cellIterator.next();
				CellType ct = cell.getCellType();

				if (ct.equals(CellType.STRING))
					dp.subject = cell.getStringCellValue();
				else if (ct.equals(CellType.NUMERIC))
					dp.grade = cell.getNumericCellValue();

			}
			inputData.add(dp);
			/* Add data to the data set */
			/* We don't have grouping in the bar chart, so we put them in fixed group */

		}
		try {

			if (fis != null)
				fis.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void generateWaterfallChart() {

		DefaultCategoryDataset my_bar_chart_dataset = new DefaultCategoryDataset();

		for (DataPair dp : inputData) {
			my_bar_chart_dataset.addValue(dp.grade, "Grades", dp.subject);
		}

		JFreeChart chart = ChartFactory.createWaterfallChart("Subject Vs Grades", "Subject", "Grades",
				my_bar_chart_dataset, PlotOrientation.VERTICAL, true, true, false);

		/* Dimensions of the bar chart */
		int width = 640; /* Width of the chart */
		int height = 720; /* Height of the chart */
		/*
		 * We don't want to create an intermediate file. So, we create a byte array
		 * output stream and byte array input stream And we pass the chart data directly
		 * to input stream through this
		 */
		/* Write chart as PNG to Output Stream */
		ByteArrayOutputStream chart_out = new ByteArrayOutputStream();
		int my_picture_id = 0;
		try {
			ChartUtilities.writeChartAsPNG(chart_out, chart, width, height);
			my_picture_id = inputWorkbook.addPicture(chart_out.toByteArray(), Workbook.PICTURE_TYPE_PNG);
			/* we close the output stream as we don't need this anymore */
			chart_out.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		/*
		 * We can now read the byte data from output stream and stamp the chart to Excel
		 * worksheet
		 */

		/* Create the drawing container */
		XSSFSheet barchartWorkSheet = addWorkSheet2Excel(inputWorkbook, "WaterFall", true);
		XSSFDrawing drawing = barchartWorkSheet.createDrawingPatriarch();
		/* Create an anchor point */
		ClientAnchor my_anchor = new XSSFClientAnchor();
		/* Define top left corner, and we can resize picture suitable from there */
		my_anchor.setCol1(4);
		my_anchor.setRow1(3);
		/* Invoke createPicture and pass the anchor point and ID */
		XSSFPicture my_picture = drawing.createPicture(my_anchor, my_picture_id);
		/* Call resize method, which resizes the image */
		my_picture.resize();
		/* Close the FileInputStream */

		/* Write changes to the workbook */
		FileOutputStream out;
		try {
			out = new FileOutputStream(new File(inputFileName));
			inputWorkbook.write(out);
			out.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public void generateBarChart() {

		DefaultCategoryDataset my_bar_chart_dataset = new DefaultCategoryDataset();

		for (DataPair dp : inputData) {
			my_bar_chart_dataset.addValue(dp.grade, "Grades", dp.subject);
		}

		JFreeChart BarChartObject = ChartFactory.createBarChart("Subject Vs Grades", "Subject", "Grades",
				my_bar_chart_dataset, PlotOrientation.VERTICAL, true, true, false);
		/* Dimensions of the bar chart */
		int width = 640; /* Width of the chart */
		int height = 480; /* Height of the chart */
		/*
		 * We don't want to create an intermediate file. So, we create a byte array
		 * output stream and byte array input stream And we pass the chart data directly
		 * to input stream through this
		 */
		/* Write chart as PNG to Output Stream */
		ByteArrayOutputStream chart_out = new ByteArrayOutputStream();
		int my_picture_id = 0;
		try {
			ChartUtilities.writeChartAsPNG(chart_out, BarChartObject, width, height);
			my_picture_id = inputWorkbook.addPicture(chart_out.toByteArray(), Workbook.PICTURE_TYPE_PNG);
			/* we close the output stream as we don't need this anymore */
			chart_out.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		/*
		 * We can now read the byte data from output stream and stamp the chart to Excel
		 * worksheet
		 */

		/* Create the drawing container */
		XSSFSheet barchartWorkSheet = addWorkSheet2Excel(inputWorkbook, "BarChart", true);
		XSSFDrawing drawing = barchartWorkSheet.createDrawingPatriarch();
		/* Create an anchor point */
		ClientAnchor my_anchor = new XSSFClientAnchor();
		/* Define top left corner, and we can resize picture suitable from there */
		my_anchor.setCol1(4);
		my_anchor.setRow1(5);
		/* Invoke createPicture and pass the anchor point and ID */
		XSSFPicture my_picture = drawing.createPicture(my_anchor, my_picture_id);
		/* Call resize method, which resizes the image */
		my_picture.resize();
		/* Close the FileInputStream */

		/* Write changes to the workbook */
		FileOutputStream out;
		try {
			out = new FileOutputStream(new File(inputFileName));
			inputWorkbook.write(out);
			out.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

	public XSSFSheet addWorkSheet2Excel(XSSFWorkbook workBook, String sheetName, boolean removeExistingSheet) {

		if (workBook.getNumberOfSheets() != 0) {
			for (int i = 0; i < workBook.getNumberOfSheets(); i++) {
				if (workBook.getSheetName(i).equals(sheetName)) {
					if (removeExistingSheet) {
						workBook.removeSheetAt(i);
						continue;
					} else {
						return workBook.getSheetAt(i);
					}

				}
			}
		}
		return workBook.createSheet(sheetName);

	}

	public static void main(String[] arg) {
		DataVisualization dv = new DataVisualization();
		dv.readInputData();
		dv.generateBarChart();
		dv.generateWaterfallChart();
	}

}
